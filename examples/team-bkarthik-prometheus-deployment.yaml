---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ns-team-bkarthik
  labels:
    team: bkarthik
    environment: test

---
# ConfigMap for Prometheus configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: ns-team-bkarthik
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'test-cluster'
        team: 'bkarthik'
    
    # Remote write configuration to receive metrics from multi-tenant proxy
    # This is where the proxy will send metrics
    remote_write:
      - url: http://localhost:9090/api/v1/write
    
    # Scrape configurations
    scrape_configs:
      # Scrape Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Scrape pods in the same namespace
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ns-team-bkarthik
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

---
# PersistentVolumeClaim for Prometheus data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data-pvc
  namespace: ns-team-bkarthik
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard  # Adjust based on your cluster

---
# StatefulSet for Prometheus
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: ns-team-bkarthik
  labels:
    app: prometheus
    team: bkarthik
spec:
  serviceName: prometheus-test
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      team: bkarthik
  template:
    metadata:
      labels:
        app: prometheus
        team: bkarthik
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-remote-write-receiver'  # Important: Enable remote write receiver
        ports:
        - containerPort: 9090
          name: web
          protocol: TCP
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-data-pvc

---
# Service to expose Prometheus
apiVersion: v1
kind: Service
metadata:
  name: prometheus-test
  namespace: ns-team-bkarthik
  labels:
    app: prometheus
    team: bkarthik
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus
    team: bkarthik

---
# ServiceAccount for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: ns-team-bkarthik

---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-bkarthik
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-bkarthik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-bkarthik
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: ns-team-bkarthik

---
# MetricAccess custom resource for team bkarthik
apiVersion: observability.ethos.io/v1alpha1
kind: MetricAccess
metadata:
  name: bkarthik-metrics-access
  namespace: ns-team-bkarthik
spec:
  # Source identifies this team's metrics in the infrastructure Prometheus
  source: team-bkarthik
  
  # Metrics this team can access from infrastructure Prometheus
  metrics:
    - "container_cpu_usage_seconds_total"
    - "container_memory_usage_bytes"
    - "container_network_receive_bytes_total"
    - "container_network_transmit_bytes_total"
    - "kube_pod_status_phase"
    - "kube_deployment_status_replicas"
    - "node_cpu_seconds_total"
    - "node_memory_MemAvailable_bytes"
    - '{__name__=~"kube_pod_.*", namespace="ns-team-bkarthik"}'
    - '{job="kubernetes-pods", namespace="ns-team-bkarthik"}'
  
  # Additional label selectors to filter metrics
  labelSelectors:
    team: "bkarthik"
  
  # Remote write configuration to push metrics to team's Prometheus
  remoteWrite:
    enabled: true
    interval: "30s"
    prometheus:
      serviceName: "prometheus-test"
      servicePort: 9090
    extraLabels:
      tenant: "team-bkarthik"
      environment: "test"
    honorLabels: true

---
# Example application deployment for testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: ns-team-bkarthik
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
        team: bkarthik
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: sample-app
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100
          name: metrics
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi 